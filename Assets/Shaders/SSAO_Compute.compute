#include "UnityCG.cginc"
// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel SSAO
#pragma kernel SSAO2


// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> _Results;

Texture2D<float4> _gPosition;
SamplerState sampler_gPosition;

Texture2D<float4> _noiseTexture;
SamplerState sampler_noiseTexture;

Texture2D _gNormal;
SamplerState sampler_gNormal;

Texture2D _gDiffuse;
SamplerState sampler_gDiffuse;

float noiseBuffer[48];
float samples[192];

int kernelSize;
float radius;
float bias;
float intensity;
float4 noiseScale;
float4x4 projection;
float4x4 viewMatrix; 
float4x4 model; 
float screenWidth;
float screenHeight;

[numthreads(8,8,1)]
void SSAO (uint3 id : SV_DispatchThreadID)
{
    float4 NormalDepth = float4(0, 0, 0, 0);
    float2 TexCoord = float2((float)id.x / (float)screenWidth, (float)id.y / (float)screenHeight);
    DecodeDepthNormal(_gNormal.SampleLevel(sampler_gNormal, TexCoord, 0), NormalDepth.w, NormalDepth.xyz);
    float3 fragPos = _gPosition.SampleLevel(sampler_gPosition, TexCoord, 0).xyz;
    float3 normal = normalize(NormalDepth.xyz);//normalize(_gNormal.SampleLevel(sampler_gNormal, TexCoord, 0).xyz);
    //float noisePos = ((id.x / noiseScale.x) + ((id.y / noiseScale.y * 3)) *3);
    //float3 randomVec = normalize(float3(noiseBuffer[noisePos ], noiseBuffer[noisePos + 1], noiseBuffer[noisePos + 2]));
    float3 randomVec = normalize(_noiseTexture.SampleLevel(sampler_noiseTexture, TexCoord * noiseScale, 0).xyz);
    float3 tangent = normalize(randomVec - mul(normal, dot(randomVec, normal)));
    float3 bitangent = cross(normal, tangent);
    float3x3 TBN = float3x3(tangent, bitangent, normal);

    float occlusion = 0.0;

    for (int i = 0; i < kernelSize * 3; i += 3)
    {
        float3 samplePos = float3(samples[i], samples[i + 1], samples[i + 2]);
        samplePos = mul(TBN, samplePos);
        samplePos = fragPos + mul(samplePos, radius);

        float4 offset = float4(samplePos.x, samplePos.y, samplePos.z, 1.0);
        offset = mul(projection, offset);
        offset.xyz /= offset.w;
        offset.xyz = offset.xyz * 0.5 + 0.5;

        float sampleDepth = _gPosition.SampleLevel(sampler_gPosition, offset.xy, 1).z;

        float rangeCheck = smoothstep(0.0, 1.0, radius / abs(fragPos.z - sampleDepth));

        occlusion += (sampleDepth >= samplePos.z + bias ? 1.0 : 0.0)* rangeCheck;

    }
    occlusion = 1.0 - (occlusion / kernelSize) * intensity;
    _Results[id.xy] = float4(occlusion, occlusion, occlusion, occlusion);
  //  _Results[id.xy] = float4(fragPos.x, fragPos.y, fragPos.z, 1.0f);//_gDiffuse.SampleLevel(sampler_gDiffuse, TexCoord, 0).xyz * occlusion;// 
    //_Results[id.xy] = tex2D(_GlowMap, id.xy);

}

float3 normalFromDepth(float depth, float2 texCoords) {
    const float2 offset1 = float2(0.0, 0.001);
    const float2 offset2 = float2(0.001, 0.0);

    float depth1 = LinearEyeDepth(_gPosition.SampleLevel(sampler_gPosition, texCoords + offset1, 0)).r;
    float depth2 = LinearEyeDepth(_gPosition.SampleLevel(sampler_gPosition, texCoords + offset2, 0)).r;

    float3 p1 = float3(offset1, depth1 - depth);
    float3 p2 = float3(offset2, depth2 - depth);

    float3 normal = cross(p1, p2);
    normal.z = -normal.z;

    return normalize(normal);
}
float brightnessCorrection;
float area;



float3 sample_sphere[16];

[numthreads(8, 8, 1)]
void SSAO2(uint3 id : SV_DispatchThreadID)
{
    int sphereLength = 16;

    float2 TexCoord = float2((float)id.x / (float)screenWidth, (float)id.y / (float)screenHeight);

    float depth = LinearEyeDepth(_gPosition.SampleLevel(sampler_gPosition, TexCoord, 0)).r;
    float3 randomVec = normalize(_noiseTexture.SampleLevel(sampler_noiseTexture, TexCoord * 4, 0).xyz);
    float3 position = float3(TexCoord, depth);
    float3 normal = normalFromDepth(depth, TexCoord);
    float radius_depth = radius / depth;

    float occlusion = 0.0;
    for (int i = 0; i < sphereLength; i ++)
    {
       // float3 samplePos = float3(samples[i], samples[i + 1], samples[i + 2]);
        float3 ray = radius_depth * reflect(sample_sphere[i], randomVec);
        float3 hemi_ray = position + sign(dot(ray, normal)) * ray;

        float occ_depth = LinearEyeDepth(_gPosition.SampleLevel(sampler_gPosition, saturate(hemi_ray.xy), 0)).r;
        float difference = depth - occ_depth;

        occlusion += step(bias, difference) * (1.0 - smoothstep(bias, area, difference));
    }

    float ao = 1.0 - intensity * occlusion * (1.0 / sphereLength);
    float4 color = float4(ao, ao, ao, ao);
    color.rgb = saturate(ao + brightnessCorrection);
    _Results[id.xy] = color;
}

